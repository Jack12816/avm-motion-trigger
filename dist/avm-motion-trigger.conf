#
# AVM Motion Trigger
#
#
# AVM FRITZ!Box credentials
#
# The hostname/ip[:port] of the fritzbox without protocol scheme or URI paths,
# by default "fritz.box"
# hostname = "";
#
# The username of the fritzbox which is able to perform smart home management
# According to the documentation from AVM this setting can be empty, by default
# empty
# username = "";
#
# The plaintext password of the fritzbox, by default 0000
# password = "";

#
# Device configuration
#
# The Actor Identification Number of the AVM Smart Switch to control
ain = "FF:FF:FF:FF:FF:FF";
#
# Turn off the device after n seconds
# 0 will disable automatic turn off, defaults to 0
turn_device_off_after = 600;
#
# The specified command will be send to the actor in case a motion
# was detected. Available commands are: `on`, `off`, `toggle`.
# Defaults to `on`.
# actor_command = "on";

#
# Sensor thresholds
#
# With a 10-bit ADC (eg. MCP3008) the range is 0-1023
# The daemon takes care of a detected PIR motion if the level of the ambient
# light is below the specified threshold
# 0 will disable the light sensor check
# light_sensor_thold = 500;
#
# If you set the turn_device_off_after parameter to 0 you probably want
# to build a toggle-by-motion setup. In this case it is advisable to specify
# a time range which prevent jitter triggering. So no action is performed
# for n seconds after a motion was detected. Defaults to 30 seconds.
# motion_sensor_locktime = 0;
#
# With this parameter you are able to enforce a sleeping interval (in seconds) if
# the current ambient light level is greater than the configured threshold.
# Defaults to 30 seconds.
# too_bright_timeout = 30;
#
# With this parameter you can control the time window between the first and the
# backup request (in seconds). 0 will disable this timeout. Defaults to 1 second.
# backup_action_timeout = 1;
#
# If even the backup request fails then we can't do much more about it. With this
# parameter you can put the daemon to sleep for a specified interval (in seconds).
# 0 will disable this timeout. Defaults to 30 seconds.
# failed_backup_action_timeout = 30;
#
# With this configuration parameter you can specify in which state the configured
# actor should be when the daemon is going to send an action to it. This parameter
# accepts the following values:
# "on", "off", and "unkown". Defaults to "unknown".
# desired_actor_state = "off";
#
# With this parameter you can set a timeout (in seconds) if the desired actor
# state check is configured and the states differs.  0 will disable this timeout.
# Defaults to 30 seconds.
# desired_actor_state_missmatch_timeout = 30;

#
# Sensor ports
#
# Specify a GPIO pin for the PIR motion sensor
# The daemon assumes a state change from LOW to HIGH represents a recognized motion
motion_sensor_gpio = 17;
#
# The daemon assumes to read the light level from a MCP3008 which is connected
# to the SPI bus. With this setting you can choose the Linux kernel SPI device
# the daemon should use. Defaults to "/dev/spidev0.0".
# light_sensor_device = "/dev/spidev0.0";
#
# With this setting you can configure which channel of the chip will be read out.
# light_sensor_channel = 0;

#
# Custom hooks
#
# When a motion is triggered the daemon can kick off a custom user defined
# script.  If a motion is detected and all configured tests are passed the
# custom motion hook will be executed before the AVM logic will be performed.
# The custom hook will be executed in a non-blocking manner. If
# the hook is not configured, it won't be executed.
# motion_pre_hook = "/etc/avm-motion-trigger.d/pre-motion.sh";
# This hook is triggered right after all configured tests are passed as the
# previous hook.  The difference of this hook is that it is executed after the
# AVM logic was performed.  The custom hook will be executed in a non-blocking
# manner. If the hook is not configured, it won't be executed.
# motion_post_hook = "/etc/avm-motion-trigger.d/post-motion.sh";
# This hook is executed right after the turn off timeout was passed (when
# configured), before the AVM logic was performed. If the hook is not configured,
# it won't be executed.
# turn_off_pre_hook = "/etc/avm-motion-trigger.d/pre-turn-off.sh";
# This hook is executed right after the turn off timeout was passed (when
# configured), before the AVM logic was performed. If the hook is not configured,
# it won't be executed.
# turn_off_post_hook = "/etc/avm-motion-trigger.d/post-turn-off.sh";
